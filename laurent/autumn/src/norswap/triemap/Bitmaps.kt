@file:Suppress("NOTHING_TO_INLINE")
package norswap.triemap

// -------------------------------------------------------------------------------------------------

/**
 * Length of hashes.
 */
val HASH_LEN = 32

// -------------------------------------------------------------------------------------------------

/**
 * Partition size, i.e. number of bits of the hash covered by each [BitmapNode].
 */
val PARTITION_SIZE = 5

// -------------------------------------------------------------------------------------------------

/**
 * Number of different value a partition can take, i.e. `2 ^ PARTITION_SIZE`.
 * The range of values is `[0, PARTITION_RANGE[`.
 */
val PARTITION_RANGE = 32

// -------------------------------------------------------------------------------------------------

/**
 * Mask to isolate the lower [PARTITION_SIZE] bits.
 */
val PARTITION_MASK = 0b11111

// -------------------------------------------------------------------------------------------------

/**
 * Returns the partition of [h] generated by [shift]: its [PARTITION_SIZE] lowest bits
 * after shifting out its [shift] lowest bits.
 */
inline fun part (h: Int, shift: Int)
    = (h ushr shift) and PARTITION_MASK

// -------------------------------------------------------------------------------------------------

/**
 * Returns an integer with a single bit set at the given position.
 */
inline fun bit (pos: Int)
    = 1 shl pos

// -------------------------------------------------------------------------------------------------

/**
 * Returns the bit for the partition of [h] generated by [shift].
 */
inline fun bitFor (h: Int, shift: Int)
    = bit(part(h, shift))

// -------------------------------------------------------------------------------------------------

/**
 * Returns the "index" of the given bit in the bitmap.
 * The index of a bit is defined as the number of lower-order bits in the bitmap.
 */
inline fun index (bitmap: Int, bit: Int)
    = Integer.bitCount(bitmap and (bit - 1))

// -------------------------------------------------------------------------------------------------
